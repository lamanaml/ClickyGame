{"version":3,"sources":["pages/Game.js","components/Navbar/index.js","components/Footer/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Game","state","image","match","matchCount","handleBtnClick","event","btnType","target","attributes","getNamedItem","value","newState","Math","floor","random","setState","loadNextDog","this","className","Component","Navbar","class","Footer","Wrapper","props","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sjBAqEeA,E,2MAhEbC,MAAQ,CACNC,MAAO,GACPC,OAAO,EACPC,WAAY,G,EAQdC,eAAiB,SAAAC,GAEf,IAAMC,EAAUD,EAAME,OAAOC,WAAWC,aAAa,cAAcC,MAG7DC,E,yVAAQ,IAAQ,EAAKX,OAEX,SAAZM,GAEFK,EAAST,MAAQ,IAAMU,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAGvDH,EAASR,WAAaQ,EAAST,MAC3BS,EAASR,WAAa,EACtBQ,EAASR,YAGbQ,EAAST,OAAQ,EAGnB,EAAKa,SAASJ,GACd,EAAKK,e,mFAxBLC,KAAKD,gB,+BAsCL,OACE,6BACE,wBAAIE,UAAU,eAAd,oBACA,wBAAIA,UAAU,eAAd,6CAIA,wBAAIA,UAAU,eAAd,qBACqBD,KAAKjB,MAAMG,WADhC,sB,GAtDWgB,a,MCsBJC,MArBf,WACE,OACE,yBAAKF,UAAU,iDACb,yBAAKG,MAAM,aACf,yBAAKA,MAAM,OACT,yBAAKA,MAAM,UAAX,eAGA,yBAAKA,MAAM,UAAX,4BAGA,yBAAKA,MAAM,UAAX,+B,MCLWC,MARf,WACE,OACE,4BAAQJ,UAAU,UAChB,gD,MCCSK,MAJf,SAAiBC,GACf,OAAO,wCAAMN,UAAU,WAAcM,KCiBxBC,MAdf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW7B,KAEnC,kBAAC,EAAD,SCHY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9B,MACvB,2DCZN+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d7bd9383.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import API from \"../utils/API\";\r\n\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    image: \"\",\r\n    match: false,\r\n    matchCount: 0\r\n  };\r\n\r\n  // When the component mounts, load the next dog to be displayed\r\n  componentDidMount() {\r\n    this.loadNextDog();\r\n  }\r\n\r\n  handleBtnClick = event => {\r\n    // Get the data-value of the clicked button\r\n    const btnType = event.target.attributes.getNamedItem(\"data-value\").value;\r\n    // Clone this.state to the newState object\r\n    // We'll modify this object and use it to set our component's state\r\n    const newState = { ...this.state };\r\n\r\n    if (btnType === \"pick\") {\r\n      // Set newState.match to either true or false depending on whether or not the dog likes us (1/5 chance)\r\n      newState.match = 1 === Math.floor(Math.random() * 5) + 1;\r\n\r\n      // Set newState.matchCount equal to its current value or its current value + 1 depending on whether the dog likes us\r\n      newState.matchCount = newState.match\r\n        ? newState.matchCount + 1\r\n        : newState.matchCount;\r\n    } else {\r\n      // If we thumbs down'ed the dog, we haven't matched with it\r\n      newState.match = false;\r\n    }\r\n    // Replace our component's state with newState, load the next dog image\r\n    this.setState(newState);\r\n    this.loadNextDog();\r\n  };\r\n\r\n//   loadNextDog = () => {\r\n//     API.getRandomDog()\r\n//       .then(res =>\r\n//         this.setState({\r\n//           image: res.data.message\r\n//         })\r\n//       )\r\n//       .catch(err => console.log(err));\r\n//   };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"text-center\">Make New Friends</h1>\r\n        <h3 className=\"text-center\">\r\n          Thumbs up on any pups you'd like to meet!\r\n        </h3>\r\n        {/* <Card image={this.state.image} handleBtnClick={this.handleBtnClick} /> */}\r\n        <h1 className=\"text-center\">\r\n          Made friends with {this.state.matchCount} pups so far!\r\n        </h1>\r\n        {/* <Alert style={{ opacity: this.state.match ? 1 : 0 }} type=\"success\"> */}\r\n          {/* Yay! That Pup Liked You Too!!!\r\n        </Alert> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\n// Depending on the current path, this component sets the \"active\" class on the appropriate navigation link item\nfunction Navbar() {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-sm\">\n      Clicky Game\n    </div>\n    <div class=\"col-sm\">\n      You guessed incorrectly!\n    </div>\n    <div class=\"col-sm\">\n      Score: 0 | Top Score: 7\n    </div>\n  </div>\n</div>\n      \n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Pupster 2017</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Game from \"./pages/Game\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Wrapper>\n          <Route exact path=\"/\" component={Game} />\n        </Wrapper>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}